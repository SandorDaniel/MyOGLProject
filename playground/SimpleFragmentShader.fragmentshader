R"(
// TODO: Testing specular color on a spehere
// TODO: Testing inhomogeneous material
// TODO: uniformization of light datas, CPU-side Light class
// TODO: material (find out the best practice for this topic)
// TODO: multiple lights (array)


in vec3 out_vert_pos;
in vec2 out_vert_tex;
in mat3 out_vert_TBN;

in vec4 out_vert_shadow[num_of_positional_lights];


uniform sampler2D tex_matdiff_sampler;
uniform sampler2D tex_matspec_sampler;
uniform sampler2D tex_norm_sampler;
uniform sampler2D shadowMap[num_of_positional_lights];

uniform float positional_light_power[num_of_positional_lights];
uniform vec3  positional_light_pos[num_of_positional_lights];

uniform float positional_light_angle_in_radians[num_of_positional_lights]; 
uniform vec3  positional_light_dir[num_of_positional_lights];

uniform vec3  positional_light_diffuse_col[num_of_positional_lights];
uniform vec3  positional_light_specular_col[num_of_positional_lights];
uniform vec3  positional_light_ambient_col[num_of_positional_lights];

uniform float directional_light_power[num_of_directional_lights]; 
uniform vec3  directional_light_dir[num_of_directional_lights];

uniform vec3  directional_light_diffuse_col[num_of_directional_lights];
uniform vec3  directional_light_specular_col[num_of_directional_lights];
uniform vec3  directional_light_ambient_col[num_of_directional_lights];

uniform vec3  cam_pos;


vec3 norm = normalize(out_vert_TBN * (2 * texture(tex_norm_sampler, out_vert_tex.st).rgb - vec3(1.0f, 1.0f, 1.0f)));


vec3  material_diffuse_col  = texture(tex_matdiff_sampler, out_vert_tex.st).rgb; // col of the texture at the specified st
vec3  material_ambient_col  = 0.005f * material_diffuse_col;
vec3  material_specular_col = texture(tex_matspec_sampler, out_vert_tex.st).rgb;


layout(location = 0) out vec4 col;



void main()
{
	vec3 color = vec3(0.0f, 0.0f, 0.0f);

	//float visibility = texture(shadowMap, vec3(out_vert_shadow.xy, out_vert_shadow.z / out_vert_shadow.w));

	for(int i = 0; i < num_of_positional_lights; ++i)
	{
		float visibility = 1.0;
		if(out_vert_shadow[i].z / out_vert_shadow[i].w > texture(shadowMap[i], out_vert_shadow[i].xy / out_vert_shadow[i].w).r + 0.01f)
		{
		   visibility = 0.0f;
		}

		color += colFromPositionalLightData(
					positional_light_pos[i],
					positional_light_dir[i],
					positional_light_angle_in_radians[i],
					positional_light_power[i],
					visibility * positional_light_diffuse_col[i],
					visibility * positional_light_specular_col[i],
					positional_light_ambient_col[i],
					out_vert_pos,
					out_vert_TBN[2],
					norm,
					material_diffuse_col,
					material_specular_col,
					material_ambient_col,
					cam_pos);
	}

	for(int i = 0; i < num_of_directional_lights; ++i)
	{
		color += colFromDirectionalLightData(
					directional_light_dir[i],
					directional_light_power[i],
					directional_light_diffuse_col[i],
					directional_light_specular_col[i],
					directional_light_ambient_col[i],
					out_vert_pos,
					out_vert_TBN[2],
					norm,
					material_diffuse_col,
					material_specular_col,
					material_ambient_col,
					cam_pos);
	}

	col = vec4(color, 1.0f);
}
)"
