R"(
const mat4 biasMatrix = mat4( // Multiplying the vertex’ position by depthMVP will give homogeneous coordinates, which are in [-1,1]; but texture sampling must be done in [0,1].
	0.5, 0.0, 0.0, 0.0,
	0.0, 0.5, 0.0, 0.0,
	0.0, 0.0, 0.5, 0.0,
	0.5, 0.5, 0.5, 1.0
);


const int num_of_positional_lights  = 2; // TODO: get it from cpu somehow
const int num_of_directional_lights = 1; // TODO: get it from cpu somehow

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 in_vert_pos;
//layout(location = 1) in vec3 in_vert_nor;
layout(location = 1) in vec2 in_vert_tex;
layout(location = 2) in vec3 in_vert_tg;
layout(location = 3) in vec3 in_vert_btg;

// Output data ; will be interpolated for each fragment.
out vec3 out_vert_pos;
//out vec3 out_vert_nor;
out vec2 out_vert_tex;
out mat3 out_vert_TBN;
out vec4 out_vert_positional_light_shadow[num_of_positional_lights];
  
// Values that stay constant for the whole mesh.
uniform mat4 V;
uniform mat4 P;
uniform int is_model_nonuniform_scaled = 0;
uniform mat4 M;

uniform mat4 positional_light_shadow_V[num_of_positional_lights];
uniform mat4 positional_light_shadow_P[num_of_positional_lights];


void main()
{
    // Output position of the vertex, in clip space : MVP * position
    gl_Position =  P * V * M * vec4(in_vert_pos, 1.0f);

	out_vert_pos = (M * vec4(in_vert_pos, 1.0f)).xyz;
	// TODO: handle the case if non uniform scaling and normal mapping is applied in the same time
	//out_vert_nor = ((is_model_nonuniform_scaled == 0 ? M : transpose(inverse(M))) * vec4(in_vert_nor, 0.0f)).xyz; // A/ Note that the 4th coordinate of vector is 0.0f. B/ https://paroj.github.io/gltut/Illumination/Tut09%20Normal%20Transformation.html
	out_vert_tex = in_vert_tex;

	// TODO: find out if we have to handle the case if non uniform scaling was applied
	// TBN has to be ortonormalized
	out_vert_TBN = mat3(normalize((M * vec4(in_vert_tg, 0.0f)).xyz),
	                    normalize((M * vec4(in_vert_btg, 0.0f)).xyz),
						normalize((M * vec4(cross(in_vert_tg, in_vert_btg), 0.0f)).xyz));
	
	for(int i = 0; i < num_of_positional_lights; ++i)
	{
		out_vert_positional_light_shadow[i] = biasMatrix * positional_light_shadow_P[i] * positional_light_shadow_V[i] * M * vec4(in_vert_pos, 1.0f);
	}
}
)"
