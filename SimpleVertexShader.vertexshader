#version 330 core


// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 in_vert_pos;
layout(location = 1) in vec3 in_vert_nor;
layout(location = 2) in vec2 in_vert_tex;

// Output data ; will be interpolated for each fragment.
out vec3 out_vert_pos;
out vec3 out_vert_nor;
out vec2 out_vert_tex;
  
// Values that stay constant for the whole mesh.
uniform mat4 M;
uniform mat4 V;
uniform mat4 P;


void main()
{
    // Output position of the vertex, in clip space : MVP * position
    gl_Position =  P * V * M * vec4(in_vert_pos, 1.0f);

	out_vert_pos = (M * vec4(in_vert_pos, 1.0f)).xyz;
	out_vert_nor = (M * vec4(in_vert_nor, 0.0f)).xyz; // A/ Note that the 4th coordinate is 0.0f. B/ Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
	out_vert_tex = in_vert_tex;
}
