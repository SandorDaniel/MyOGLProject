// TODO: Testing specular color on a spehere
// TODO: Testing inhomogeneous material
// TODO: uniformization of light datas, CPU-side Light class
// TODO: material (find out the best practice for this topic)
// TODO: multiple lights (array)

#version 330 core



float angleBetweenVectorsInRadians(
	in vec3 u, 
	in vec3 v)
{
	return acos(dot(u, v) / (length(u) * length(v)));
}


void preProcessPositionalLightData(
	in    vec3  positional_light_pos,
	in    vec3  positional_light_dir,
	in    float positional_light_angle_in_radians,
	in    vec3  out_vert_pos,
	out   float distance_factor,
	inout float positional_light_power,
	out   vec3 light_dir)
{
	float distance = length(positional_light_pos - out_vert_pos);
	distance_factor = distance * distance;

	light_dir = normalize(positional_light_pos - out_vert_pos);

	if(angleBetweenVectorsInRadians(-light_dir, positional_light_dir) > positional_light_angle_in_radians)
    {
		positional_light_power = 0.0f;
    }
}


void preProcessDirectionalLightData(
	in  vec3 directional_light_dir,
	out float distance_factor,
	out vec3 light_dir)
{
	distance_factor = 1.0f;

	light_dir = -normalize(directional_light_dir);
}


vec3 colFromPreProcessedLightData(
	in float light_power,
	in vec3 light_diffuse_col,
	in vec3 light_specular_col,
	in vec3 light_ambient_col,
	in vec3 out_vert_pos,
	in vec3 out_vert_nor,
	in vec3 nor,
	in vec3 material_diffuse_col,
	in vec3 material_specular_col,
	in vec3 material_ambient_col,
	in vec3 cam_pos,
	in vec3 light_dir,
	in float distance_factor
)
{
	if (angleBetweenVectorsInRadians(out_vert_nor, light_dir) > 3.14f / 1.75f) // TODO: After implementing shadow mapping, rethig the neccesity of this block.
	{
		return material_ambient_col * light_ambient_col / distance_factor;
	}

	// Normal of the computed fragment, in camera space
	vec3 n = normalize(nor);
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize(light_dir);
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp(dot(n, l), 0, 1);

	// Eye vector (towards the camera)
	vec3 E = normalize(cam_pos - out_vert_pos);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l, n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp(dot(E, R), 0, 1);

	return
		// Ambient : simulates indirect lighting
		material_ambient_col * light_ambient_col / distance_factor
		// Diffuse : "color" of the object
		+ material_diffuse_col * light_diffuse_col  * light_power * cosTheta / distance_factor
		// Specular : reflective highlight, like a mirror
		+ material_specular_col * light_specular_col * light_power * pow(cosAlpha, 5) / distance_factor;
}


vec3 colFromPositionalLightData(
	in vec3  positional_light_pos,
	in vec3  positional_light_dir,
	in float positional_light_angle_in_radians,
	in float positional_light_power,
	in vec3  positional_light_diffuse_col,
	in vec3  positional_light_specular_col,
	in vec3  positional_light_ambient_col,
	in vec3  out_vert_pos,
	in vec3  out_vert_nor,
	in vec3  nor,
	in vec3  material_diffuse_col,
	in vec3  material_specular_col,
	in vec3  material_ambient_col,
	in vec3  cam_pos)
{
	vec3 light_dir;
	float distance_factor;
	preProcessPositionalLightData(
		positional_light_pos, // in
		positional_light_dir, // in
		positional_light_angle_in_radians, // in
		out_vert_pos, // in
		distance_factor, // out
		positional_light_power, // inout
		light_dir);

	return colFromPreProcessedLightData(
		positional_light_power,
		positional_light_diffuse_col,
		positional_light_specular_col,
		positional_light_ambient_col,
		out_vert_pos,
		out_vert_nor,
		nor,
		material_diffuse_col,
		material_specular_col,
		material_ambient_col,
		cam_pos,
		light_dir,
		distance_factor
	);
}


vec3 colFromDirectionalLightData(
	in vec3  directional_light_dir,
	in float directional_light_power,
	in vec3  directional_light_diffuse_col,
	in vec3  directional_light_specular_col,
	in vec3  directional_light_ambient_col,
	in vec3  out_vert_pos,
	in vec3  out_vert_nor,
	in vec3  nor,
	in vec3  material_diffuse_col,
	in vec3  material_specular_col,
	in vec3  material_ambient_col,
	in vec3  cam_pos)
{
	vec3 light_dir;
	float distance_factor;
	preProcessDirectionalLightData(
		directional_light_dir, // in
		distance_factor, // out
		light_dir);

	return colFromPreProcessedLightData(
		directional_light_power,
		directional_light_diffuse_col,
		directional_light_specular_col,
		directional_light_ambient_col,
		out_vert_pos,
		out_vert_nor,
		nor,
		material_diffuse_col,
		material_specular_col,
		material_ambient_col,
		cam_pos,
		light_dir,
		distance_factor
	);
}


const int num_of_positional_lights = 1; // TODO: get it from cpu somehow

const int num_of_directional_lights = 1; // TODO: get it from cpu somehow


in vec3 out_vert_pos;
in vec2 out_vert_tex;
in mat3 out_vert_TBN;

in vec4 out_vert_shadow;


uniform sampler2D tex_matdiff_sampler;
uniform sampler2D tex_matspec_sampler;
uniform sampler2D tex_norm_sampler;
uniform sampler2D shadowMap;

uniform float positional_light_power[num_of_positional_lights];
uniform vec3  positional_light_pos[num_of_positional_lights];

uniform float positional_light_angle_in_radians[num_of_positional_lights]; 
uniform vec3  positional_light_dir[num_of_positional_lights];

uniform vec3  positional_light_diffuse_col[num_of_positional_lights];
uniform vec3  positional_light_specular_col[num_of_positional_lights];
uniform vec3  positional_light_ambient_col[num_of_positional_lights];

uniform float directional_light_power[num_of_directional_lights]; 
uniform vec3  directional_light_dir[num_of_directional_lights];

uniform vec3  directional_light_diffuse_col[num_of_directional_lights];
uniform vec3  directional_light_specular_col[num_of_directional_lights];
uniform vec3  directional_light_ambient_col[num_of_directional_lights];

uniform vec3  cam_pos;


vec3 norm = normalize(out_vert_TBN * (2 * texture(tex_norm_sampler, out_vert_tex.st).rgb - vec3(1.0f, 1.0f, 1.0f)));


vec3  material_diffuse_col  = texture(tex_matdiff_sampler, out_vert_tex.st).rgb; // col of the texture at the specified st
vec3  material_ambient_col  = 0.005f * material_diffuse_col;
vec3  material_specular_col = texture(tex_matspec_sampler, out_vert_tex.st).rgb;


layout(location = 0) out vec4 col;



void main()
{
	vec3 color = vec3(0.0f, 0.0f, 0.0f);

	for(int i = 0; i < num_of_positional_lights; ++i)
	{
		color += colFromPositionalLightData(
					positional_light_pos[i],
					positional_light_dir[i],
					positional_light_angle_in_radians[i],
					positional_light_power[i],
					positional_light_diffuse_col[i],
					positional_light_specular_col[i],
					positional_light_ambient_col[i],
					out_vert_pos,
					out_vert_TBN[2],
					norm,
					material_diffuse_col,
					material_specular_col,
					material_ambient_col,
					cam_pos);
	}

	//float visibility = texture(shadowMap, vec3(out_vert_shadow.xy, out_vert_shadow.z / out_vert_shadow.w));

	float visibility = 1.0;
	if((out_vert_shadow.z)/out_vert_shadow.w >= texture(shadowMap, out_vert_shadow.xy).r + 0.01f)
	{
	   visibility = 0.1f;
	}

	//float visibility = texture( shadowMap, vec3(out_vert_shadow.xy, (out_vert_shadow.z)/out_vert_shadow.w) );

	for(int i = 0; i < num_of_directional_lights; ++i)
	{
		color += colFromDirectionalLightData(
					directional_light_dir[i],
					directional_light_power[i],
					visibility * directional_light_diffuse_col[i],
					visibility * directional_light_specular_col[i],
					directional_light_ambient_col[i],
					out_vert_pos,
					out_vert_TBN[2],
					norm,
					material_diffuse_col,
					material_specular_col,
					material_ambient_col,
					cam_pos);
	}

	col = vec4(color, 1.0f);
}
